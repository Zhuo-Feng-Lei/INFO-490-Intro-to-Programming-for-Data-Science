# -*- coding: utf-8 -*-
"""INFO490-FindingCharacters

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zD44cnwtM7Srd7Z2-q7eCq_6a72wRqgQ
"""

import collections
import re
import urllib
import requests

def read_remote(url):
  # assumes the url is already encoded (see urllib.parse.urlencode)
  response = requests.get(url)
  if response.status_code == requests.codes.ok: # that is 200
    return response.text
  return None

def build_google_drive_url(doc_id):
  DRIVE1  = "https://docs.google.com/uc"
  DRIVE2  = "https://drive.google.com/uc"
  baseurl = DRIVE1 # DRIVE2 works as well 
  params = {"export" : "download",
            "id"     : doc_id}
  
  # build the url using baseurl
  # and the query parameters specified 
  # so that you can fetch it using
  # read_remote
  
  # CHANGE ME:
  url = baseurl + "?" + urllib.parse.urlencode(params) 
  return url

def read_google_doc(doc_id): 
   # read the remote document pointed to by doc_id
   # save the contents to a local file
   # return the contents of the document/local file
  content = urllib.request.urlopen(build_google_drive_url(doc_id)).read()
  f = open(doc_id + ".txt", "w+")
  f.write(str(content))
  return content.decode("utf-8")

def split_text_into_tokens(text):
  temp = re.findall(r"['A-Za-z0-9]+-?['A-Za-z0-9]+", text)
  normalized = []
  for i in temp:
    normalized.append(i.strip("!\"#$%&'()*+, -./:;<=>?@[\]^_`{|}~"))
  return normalized

def load_stop_words():
  return ['a', 'about', 'above', 'after', 'again', 'against', 'all', 'am', 'an', 'and', 'any', 'are', "aren't", 'as', 'at', 'be', 'because', 'been', 'before', 'being', 'below', 'between', 'both', 'but', 'by', "can't", 'cannot', 'could', "couldn't", 'did', "didn't", 'do', 'does', "doesn't", 'doing', "don't", 'down', 'during', 'each', 'few', 'for', 'from', 'further', 'had', "hadn't", 'has', "hasn't", 'have', "haven't", 'having', 'he', "he'd", "he'll", "he's", 'her', 'here', "here's", 'hers', 'herself', 'him', 'himself', 'his', 'how', "how's", 'i', "i'd", "i'll", "i'm", "i've", 'if', 'in', 'into', 'is', "isn't", 'it', "it's", 'its', 'itself', "let's", 'me', 'more', 'most', "mustn't", 'my', 'myself', 'no', 'nor', 'not', 'of', 'off', 'on', 'once', 'only', 'or', 'other', 'ought', 'our', 'ours', 'ourselves', 'out', 'over', 'own', 'same', "shan't", 'she', "she'd", "she'll", "she's", 'should', "shouldn't", 'so', 'some', 'such', 'than', 'that', "that's", 'the', 'their', 'theirs', 'them', 'themselves', 'then', 'there', "there's", 'these', 'they', "they'd", "they'll", "they're", "they've", 'this', 'those', 'through', 'to', 'too', 'under', 'until', 'up', 'very', 'was', "wasn't", 'we', "we'd", "we'll", "we're", "we've", 'were', "weren't", 'what', "what's", 'when', "when's", 'where', "where's", 'which', 'while', 'who', "who's", 'whom', 'why', "why's", 'with', "won't", 'would', "wouldn't", 'you', "you'd", "you'll", "you're", "you've", 'your', 'yours', 'yourself', 'yourselves']

def bi_grams(tokens):
  bigram_list = []
  for i in range(len(tokens)-1):
    bigram_list.append((tokens[i], tokens[i+1]))
  return bigram_list

def top_n(tokens, n):
  counter = collections.Counter(tokens)
  return counter.most_common(n)

def find_characters_v1(text, stoplist, top):
  cleaned = []
  tokens = split_text_into_tokens(text)
  r = re.compile(r"\b[A-Z].*?\b")
  caps = list(filter(r.match, tokens))
  for i in caps:
    if (i.lower() not in stoplist):
      cleaned.append(i)
  return top_n(cleaned,top)

#HUCK_ID = "13F68-nA4W-0t3eNuIodh8fxTMZV5Nlpp"
#text = read_google_doc(HUCK_ID)
#stop = load_stop_words()
#v1  = find_characters_v1(text, stop, 15)
#print(v1)

def find_characters_v2(text, stoplist, top):
  filtered = []
  new_bigrams = []
  tokens = split_text_into_tokens(text)
  bigrams = bi_grams(tokens)
  for i in bigrams:
    if (i[0][0].isupper() and i[1][0].isupper() and i[0].lower() not in stoplist and i[1].lower() not in stoplist):
      new_bigrams.append(i)
  return top_n(new_bigrams,top)

#v2  = find_characters_v2(text, [], 15)
#print(v2)

def get_titles(text):
    title_tokens = re.findall(r"[A-Z]{1}[a-z]{1,3}\.", text)
    pseudo_titles = re.findall(r"[A-Z]{1}[a-z]{1,3}\s", text)
    title_tokens_normalized = []
    for i in title_tokens:
      title_tokens_normalized.append(i.strip("!\"#$%&'()*+, -./:;<=>?@[\]^_`{|}~\n"))
    p_titles_normalized = []
    for i in pseudo_titles:
      p_titles_normalized.append(i.strip("!\"#$%&'()*+, -./:;<=>?@[\]^_`{|}~\n"))
    result = list(set(title_tokens_normalized) - set(p_titles_normalized))
    return result

#titles = get_titles(text)
#print(titles)

def find_characters_v3(text, stoplist, top):
  titles = get_titles(text)
  cleaned = []
  result = []
  tokens = split_text_into_tokens(text)
  for i in tokens:
    if (i.lower() not in stoplist):
      cleaned.append(i)
  bigrams_list = bi_grams(cleaned)
  for i in bigrams_list:
    if (i[0] in titles and i[1][0].isupper() and i[1].lower() not in stoplist):
      result.append(i)
  return top_n(result, top)

#v3  = find_characters_v3(text, load_stop_words(), 15)
#print(v3)