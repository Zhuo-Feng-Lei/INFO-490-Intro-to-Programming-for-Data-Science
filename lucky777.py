# -*- coding: utf-8 -*-
"""INFO490-777

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1eUrrBk0ILn7mWtJ2gspD2dIENLF2k36z
"""

import requests 
import urllib
import re
# versions
PG_HAMLET_URL = 'http://www.gutenberg.org/cache/epub/2265/pg2265.txt'

def read_remote(url):
  # assumes the url is already encoded (see urllib.parse.urlencode)
  response = requests.get(url)
  if response.status_code == requests.codes.ok: # that is 200
    return response.text
  return None

def build_google_drive_url(doc_id):
  DRIVE1  = "https://docs.google.com/uc"
  DRIVE2  = "https://drive.google.com/uc"
  baseurl = DRIVE1 # DRIVE2 works as well 
  params = {"export" : "download",
            "id"     : doc_id}
  
  # build the url using baseurl
  # and the query parameters specified 
  # so that you can fetch it using
  # read_remote
  
  # CHANGE ME:
  url = baseurl + "?" + urllib.parse.urlencode(params) 
  return url

  
def get_hamlet():
  g_id = get_book_id()
  url  = build_google_drive_url(g_id)
  return read_remote(url)
  
def get_book_id():
  return '1whaAi95nztNnz40o8SB0gblgYG4pFf4W'

def get_hamlet():
  g_id = get_book_id()
  url  = build_google_drive_url(g_id)
  return read_remote(url)

#hamlet = get_hamlet()
#print(hamlet[0:100])

ANSWER_TO_LIFE = 42
def answer_to_life():
  text = get_hamlet()
  idx = text.find('To be,')
  ans = text[idx:idx+ANSWER_TO_LIFE]
  return ans

#print(answer_to_life())

def clean_hamlet(text):
  start = text.rfind('The Tragedie of Hamlet')
  return text[start:].strip()

def find_lucky(text, num):
  pattern = r"\b[a-zA-Z']{%d}[a-zA-Z]\b" % (num - 1)
  words = {}
  for word in re.findall(pattern, text, re.M | re.IGNORECASE):
    lowercase_word = word.lower()
    words[lowercase_word] = words.get(lowercase_word, 0) + 1
  lucky_words = [word for word, count in words.items() if count == num]
  print(lucky_words)
  if len(lucky_words) == num:
    return sorted(lucky_words)

def test_777():

  hamlet = clean_hamlet(get_hamlet())
  print(find_lucky(hamlet, 7))
  for n in range(2,10):
   print(n, find_lucky(hamlet, n))
# comment me out before submitting!!
#test_777()